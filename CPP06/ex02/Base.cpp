/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Base.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ihama <ihama@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/03/06 11:53:10 by ihama             #+#    #+#             */
/*   Updated: 2024/03/07 12:47:38 by ihama            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "A.hpp"
#include "B.hpp"
#include "Base.hpp"
#include "C.hpp"

Base * generate(void)
{
    int nb = rand() % 3; // because we have 3 class A, B and C we need only between o and 2;
    switch (nb)
    {
    case 0: return new A;
    case 1: return new B;
    case 2: return new C;
    default:
    std::cerr << "Unexpected value generated by rand() % 3: " << nb << std::endl;
            return nullptr; // Handle the error gracefully
        break;
    }    
}
//It prints the actual type of the object pointed to by p: "A", "B" or "C".
//Base* p pointer as an argument and prints the type of the object using dynamic casting. 
void identify(Base* p){
    std::cout << "--->>>>" << std::endl;
if (dynamic_cast<A*>(p)) {
        std::cout << "\033[1;31m A \033[0m" << std::endl;
    } else if (dynamic_cast<B*>(p)) {
        std::cout << "\033[1;31m B \033[0m" << std::endl;
    } else if (dynamic_cast<C*>(p)) {
        std::cout << "\033[1;31m C \033[0m" << std::endl;
    }
}
//It prints the actual type of the object pointed to by p: "A", "B" or "C".
//Base&p reference and prints the type without using any pointers
void identify(Base& p) {
    Base& check = p; // Define check as a reference to Base
    std::cout << "=====>" << std::endl;
    try {
        check = dynamic_cast<A&>(p);
        std::cout << "A" << std::endl;
        return;
    } catch (std::bad_cast&) {}

    try {
        check = dynamic_cast<B&>(p);
        std::cout << "B" << std::endl;
        return;
    } catch (std::bad_cast&) {}

    try {
        check = dynamic_cast<C&>(p);
        std::cout << "C" << std::endl;
        return;
    } catch (std::bad_cast&) {}
}